{"version":3,"sources":["components/ContactsAppContainer/Container.module.css","components/ContactList/ContactListItem-fade.module.css","components/ContactsAppContainer/ContactsAppContainer.js","redux/phonebook/phonebookOperations.js","redux/phonebook/phonebookSelectors.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","components/Notification/Notification.js","components/Form/Form.js","components/Filter/Filter.js","components/AppName/AppName.js","views/ContactsView.js"],"names":["module","exports","ContactsAppContainer","children","className","styles","Container","axios","defaults","baseURL","addContact","name","number","dispatch","contactActions","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","message","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","removeContact","id","removeContactRequest","delete","removeContactSuccess","removeContactError","getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","createSelector","contact","toLowerCase","includes","getLoading","loading","getContactById","contactId","find","connect","ownProps","item","contactsSelectors","onDeleteContact","contactOperations","console","log","ListGroup","Item","Row","Col","sm","style","display","paddingTop","margin","Button","variant","type","onClick","opacity","length","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","fadeStyles","position","top","right","padding","Notification","Alert","ContactForm","notification","notificationIsVisible","handleInputChange","e","currentTarget","value","setState","handleSubmit","props","preventDefault","some","onAddContact","reset","alert","this","in","unmountOnExit","onEntered","Form","autoComplete","onSubmit","Group","as","controlId","Label","column","Control","required","placeholder","onChange","Component","mapDispatchToProps","conntactOperations","filterContacts","marginTop","target","AppName","appear","ContactsView","onFetchContacts","isLoading","isLoadingContact","contactSelectors"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,UAAY,+B,oBCA9BD,EAAOC,QAAU,CAAC,MAAQ,oCAAoC,YAAc,0CAA0C,KAAO,mCAAmC,WAAa,2C,0JCM9JC,EAJc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC3B,yBAAKC,UAAWC,IAAOC,WAAYH,I,0CCDrCI,IAAMC,SAASC,QAAU,2CACzB,IA4Be,GAAEC,WA5BE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OAAsB,SAAAC,GACvCA,EAASC,IAAeC,qBACxBR,IACGS,KAAK,YAAa,CAAEL,OAAMC,WAC1BK,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPL,EAASC,IAAeK,kBAAkBD,OAE3CE,OAAM,SAAAC,GAAK,OAAIR,EAASC,IAAeQ,gBAAgBD,EAAME,eAqBrCC,cAlBP,kBAAM,SAAAX,GAC1BA,EAASC,IAAeW,wBACxBlB,IACGmB,IAAI,aACJT,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcL,EAASC,IAAea,qBAAqBT,OAEhEE,OAAM,SAAAC,GAAK,OAAIR,EAASC,IAAec,mBAAmBP,EAAME,eAYzBM,cATtB,SAAAC,GAAE,OAAI,SAAAjB,GAC1BA,EAASC,IAAeiB,wBACxBxB,IACGyB,OADH,mBACsBF,IACnBb,MAAK,kBAAMJ,EAASC,IAAemB,qBAAqBH,OAExDV,OAAM,SAAAC,GAAK,OAAIR,EAASC,IAAeoB,mBAAmBb,EAAME,gB,QC3B/DY,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAGtCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QAEpCC,EAAsBC,YAC1B,CAACP,EAAaI,IACd,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAG,GAAO,OAC5BA,EAAQhC,KAAKiC,cAAcC,SAASL,SAU3B,GACbL,cACAW,WAnBiB,SAAAV,GAAK,OAAIA,EAAMC,SAASU,SAoBzCR,YACAS,eATqBN,YACrB,CAAC,SAACN,EAAOa,GAAR,OAAsBA,GAAWd,IAClC,SAACc,EAAWZ,GAAZ,OAAyBA,EAASa,MAAK,SAAAP,GAAO,OAAIA,EAAQb,KAAOmB,QAQjER,uB,mCCyBaU,G,YAAAA,aAVE,SAACf,EAAOgB,GACvB,IAAMC,EAAOC,EAAkBN,eAAeZ,EAAOgB,EAAStB,IAC9D,OAAO,eAAKuB,MAEa,SAACxC,EAAUuC,GAAX,MAAyB,CAClDG,gBAAiB,WACf1C,EAAS2C,EAAkB3B,cAAcuB,EAAStB,KAClD2B,QAAQC,IAAIN,EAAStB,QAGVqB,EAzCK,SAAC,GAA0C,EAAxCrB,GAAyC,IAArCnB,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,OAAQ2C,EAAsB,EAAtBA,gBACvC,OACE,kBAACI,EAAA,EAAUC,KAAX,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,uBACEC,MAAO,CAAEC,QAAS,QAASC,WAAY,MAAOC,OAAQ,aAErDxD,EAHH,MAGYC,IAGd,kBAACkD,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACK,EAAA,EAAD,CACEC,QAAQ,iBACRC,KAAK,SACLC,QAAShB,EACTS,MAAO,CAAEQ,QAAS,QAJpB,iB,oCCcKrB,eAHS,SAAAf,GAAK,MAAK,CAChCC,SAAUiB,EAAkBb,oBAAoBL,MAEnCe,EAzBK,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SACrB,OACEA,EAASoC,OAAS,GAChB,kBAACC,EAAA,EAAD,CAAiBC,UAAWhB,IAAWU,QAAQ,SAC5ChC,EAASuC,KAAI,gBAAG9C,EAAH,EAAGA,GAAH,OACZ,kBAAC+C,EAAA,EAAD,CAAeC,IAAKhD,EAAIiD,QAAS,IAAKC,WAAYC,KAChD,kBAAC,EAAD,CAAanD,GAAIA,Y,gBCZvBzB,EAAS,CACb6E,SAAU,WACVC,IAAK,MACLC,MAAO,OACPC,QAAS,OAYIC,EAVM,SAAC,GAAiB,IAAf/D,EAAc,EAAdA,QACtB,OACE,kBAACgE,EAAA,EAAD,CAAOlB,QAAQ,SAASL,MAAO3D,GAC5BkB,I,kBCDDiE,E,4MAKJpD,MAAQ,CACNzB,KAAM,GACNC,OAAQ,GACR6E,aAAc,GACdC,uBAAuB,G,EAGzBC,kBAAoB,SAAAC,GAAM,IAAD,EACCA,EAAEC,cAAlBlF,EADe,EACfA,KAAMmF,EADS,EACTA,MACd,EAAKC,SAAL,eAAiBpF,EAAOmF,K,EAE1BE,aAAe,SAAAJ,GAAM,IAAD,EACO,EAAKxD,MAAtBzB,EADU,EACVA,KAAMC,EADI,EACJA,OACRyB,EAAW,EAAK4D,MAAM5D,SAE5BuD,EAAEM,iBAEW,KAATvF,EAIW,KAAXC,EAKFyB,EAAS8D,MAAK,SAAAxD,GACZ,OAAOhC,EAAKiC,gBAAkBD,EAAQhC,KAAKiC,iBAG7C,EAAKmD,SAAS,CACZN,aAAa,YAAD,OAAc9E,EAAd,sBACZ+E,uBAAuB,IAMzBrD,EAAS8D,MAAK,SAAAxD,GACZ,OAAO/B,IAAW+B,EAAQ/B,UAG5B,EAAKmF,SAAS,CACZN,aAAa,WAAD,OAAa7E,EAAb,sBACZ8E,uBAAuB,KAK3B,EAAKO,MAAMG,aAAa,CAAEzF,OAAMC,WAChC,EAAKyF,SA5BHC,MAAM,wBAJNA,MAAM,wC,EAmCVD,MAAQ,WACN,EAAKN,SAAS,CAAEpF,KAAM,GAAIC,OAAQ,M,uDAG1B,IAAD,SACyC2F,KAAKnE,MAA7CqD,EADD,EACCA,aAAcC,EADf,EACeA,sBACtB,OACE,oCACE,kBAACb,EAAA,EAAD,CACE2B,GAAId,EACJX,QAAS,IACTC,WAAW,uBACXyB,eAAa,EACbC,UAAW,kBAAM,EAAKX,SAAS,CAAEL,uBAAuB,MAExD,kBAAC,EAAD,CAAcnE,QAASkE,KACR,IAmCjB,kBAACkB,EAAA,EAAD,CAAMC,aAAa,MAAMC,SAAUN,KAAKP,cACtC,kBAACW,EAAA,EAAKG,MAAN,CAAYC,GAAIlD,IAAKmD,UAAU,sBAC7B,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACnD,GAAG,KAAtB,UAGA,kBAACD,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC4C,EAAA,EAAKQ,QAAN,CACEC,UAAQ,EAER9C,KAAK,OACL+C,YAAY,oBACZvB,MAAOS,KAAKnE,MAAMzB,KAClBA,KAAK,OACL2G,SAAUf,KAAKZ,sBAKrB,kBAACgB,EAAA,EAAKG,MAAN,CAAYC,GAAIlD,IAAKmD,UAAU,yBAC7B,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACnD,GAAG,KAAtB,YAGA,kBAACD,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC4C,EAAA,EAAKQ,QAAN,CACEC,UAAQ,EAER9C,KAAK,SACL+C,YAAY,iBACZvB,MAAOS,KAAKnE,MAAMxB,OAClBD,KAAK,SACL2G,SAAUf,KAAKZ,sBAIrB,kBAACvB,EAAA,EAAD,CACEC,QAAQ,UACRC,KAAK,SACLN,MAAO,CAAEG,OAAQ,SAAUF,QAAS,QAASO,QAAS,QAHxD,qB,GA/IgB+C,aA8JpBC,EAAqB,CACzBpB,aAAcqB,EAAmB/G,YAEpByC,eANS,SAAAf,GAAK,MAAK,CAChCC,SAAUiB,EAAkBnB,YAAYC,MAKFoF,EAAzBrE,CAA6CqC,GCjItDgC,EAAqB,CACzBF,SAAUxG,IAAe4G,gBAOZvE,eAZS,SAAAf,GAAK,MAAK,CAChC0D,MAAOxC,EAAkBf,UAAUH,MAWGoF,EAAzBrE,EA5CA,SAAC,GAAyB,IAAvB2C,EAAsB,EAAtBA,MAAOwB,EAAe,EAAfA,SACvB,OAWE,kBAACX,EAAA,EAAKG,MAAN,CACEC,GAAIlD,IACJmD,UAAU,qBACVhD,MAAO,CAAE2D,UAAW,SAEpB,kBAAChB,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACnD,GAAG,KAAtB,wBAGA,kBAACD,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC4C,EAAA,EAAKQ,QAAN,CACE7C,KAAK,OACL+C,YAAY,OACZvB,MAAOA,EACPwB,SAAU,SAAA1B,GAAC,OAAI0B,EAAS1B,EAAEgC,OAAO9B,eCf5B+B,G,OAdC,WACd,OACE,kBAAChD,EAAA,EAAD,CACE2B,IAAI,EACJsB,QAAQ,EACR/C,QAAS,IACTC,WAAW,kBACXyB,eAAa,GAEb,4CCJAsB,E,kLAEFxB,KAAKN,MAAM+B,oB,+BAGX,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,wCACCzB,KAAKN,MAAMgC,WAAa,0CACzB,kBAAC,EAAD,W,GAZmBV,aAqBrBC,EAAqB,CACzBQ,gBAAiBxE,EAAkBhC,eAGtB2B,uBAPS,SAAAf,GAAK,MAAK,CAChC8F,iBAAkBC,EAAiBrF,WAAWV,MAMRoF,EAAzBrE,CAA6C4E","file":"static/js/3.80f7b289.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__2f0xo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactListItem-fade_enter__3L9LC\",\"enterActive\":\"ContactListItem-fade_enterActive__3juOu\",\"exit\":\"ContactListItem-fade_exit__2OvWU\",\"exitActive\":\"ContactListItem-fade_exitActive__1R0L4\"};","import React from 'react';\nimport styles from './Container.module.css';\n\nconst ContactsAppContainer = ({ children }) => (\n  <div className={styles.Container}>{children}</div>\n);\n\nexport default ContactsAppContainer;\n","import contactActions from './phonebook-actions';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\nconst addContact = ({ name, number }) => dispatch => {\n  dispatch(contactActions.addContactRequest());\n  axios\n    .post('/contacts', { name, number })\n    .then(({ data }) => {\n      dispatch(contactActions.addContactSuccess(data));\n    })\n    .catch(error => dispatch(contactActions.addContactError(error.message)));\n};\n\nconst fetchContacts = () => dispatch => {\n  dispatch(contactActions.fetchContactsRequest());\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(contactActions.fetchContactsSuccess(data)))\n\n    .catch(error => dispatch(contactActions.fetchContactsError(error.message)));\n};\n\nconst removeContact = id => dispatch => {\n  dispatch(contactActions.removeContactRequest());\n  axios\n    .delete(`contacts/${id}`)\n    .then(() => dispatch(contactActions.removeContactSuccess(id)))\n\n    .catch(error => dispatch(contactActions.removeContactError(error.message)));\n};\n\nexport default { addContact, fetchContacts, removeContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getContacts = state => state.contacts.items;\n\nconst getLoading = state => state.contacts.loading;\nconst getFilter = state => state.contacts.filter;\n\nconst getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter),\n    );\n  },\n);\n\nconst getContactById = createSelector(\n  [(state, contactId) => contactId, getContacts],\n  (contactId, contacts) => contacts.find(contact => contact.id === contactId),\n);\n\nexport default {\n  getContacts,\n  getLoading,\n  getFilter,\n  getContactById,\n  getFilteredContacts,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import styles from './ContactList.module.css';\nimport { connect } from 'react-redux';\nimport contactOperations from '../../redux/phonebook/phonebookOperations';\nimport contactsSelectors from '../../redux/phonebook/phonebookSelectors';\nimport { ListGroup, Button, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../styles/base.scss';\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <ListGroup.Item>\n      <Row>\n        <Col sm=\"9\">\n          <p\n            style={{ display: 'block', paddingTop: '7px', margin: 'auto 0px' }}\n          >\n            {name} : {number}\n          </p>\n        </Col>\n        <Col sm=\"3\">\n          <Button\n            variant=\"outline-danger\"\n            type=\"button\"\n            onClick={onDeleteContact}\n            style={{ opacity: '0.7' }}\n          >\n            Delete\n          </Button>\n        </Col>\n      </Row>\n    </ListGroup.Item>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\nconst mapState = (state, ownProps) => {\n  const item = contactsSelectors.getContactById(state, ownProps.id);\n  return { ...item };\n};\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onDeleteContact: () => {\n    dispatch(contactOperations.removeContact(ownProps.id));\n    console.log(ownProps.id);\n  },\n});\nexport default connect(mapState, mapDispatchToProps)(ContactItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactItem from './ContactItem';\n// import styles from './ContactList.module.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport fadeStyles from './ContactListItem-fade.module.css';\nimport contactsSelectors from '../../redux/phonebook/phonebookSelectors';\nimport { ListGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst ContactList = ({ contacts }) => {\n  return (\n    contacts.length > 0 && (\n      <TransitionGroup component={ListGroup} variant=\"flush\">\n        {contacts.map(({ id }) => (\n          <CSSTransition key={id} timeout={250} classNames={fadeStyles}>\n            <ContactItem id={id} />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    )\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getFilteredContacts(state),\n});\nexport default connect(mapStateToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from 'react-bootstrap/Alert';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst styles = {\n  position: 'absolute',\n  top: '5px',\n  right: '20px',\n  padding: '5px',\n};\nconst Notification = ({ message }) => {\n  return (\n    <Alert variant=\"danger\" style={styles}>\n      {message}\n    </Alert>\n  );\n};\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n\n// <div bsStyle=\"alert\" className=\"Notification\">\n//   <p>{message}</p>\n// </div>\n\n// style={{\n//   position: 'absolute',\n//   top: '5px',\n//   right: '20px',\n//   padding: '5px',\n// }}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// import styles from './Form.module.css';\nimport { connect } from 'react-redux';\nimport conntactOperations from '../../redux/phonebook/phonebookOperations';\nimport Notification from '../Notification';\nimport { CSSTransition } from 'react-transition-group';\nimport '../../styles/base.scss';\nimport './Form-notification.css';\nimport contactsSelectors from '../../redux/phonebook/phonebookSelectors';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onAddContact: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n    notification: '',\n    notificationIsVisible: false,\n  };\n\n  handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n  handleSubmit = e => {\n    const { name, number } = this.state;\n    const contacts = this.props.contacts;\n\n    e.preventDefault();\n\n    if (name === '') {\n      alert('Please, give a name for new contact');\n      return;\n    }\n    if (number === '') {\n      alert('Please, add a number');\n      return;\n    }\n    if (\n      contacts.some(contact => {\n        return name.toLowerCase() === contact.name.toLowerCase();\n      })\n    ) {\n      this.setState({\n        notification: `Contact \"${name}\" is already exist`,\n        notificationIsVisible: true,\n      });\n      return;\n    }\n\n    if (\n      contacts.some(contact => {\n        return number === contact.number;\n      })\n    ) {\n      this.setState({\n        notification: `Number \"${number}\" is already exist`,\n        notificationIsVisible: true,\n      });\n      return;\n    }\n\n    this.props.onAddContact({ name, number });\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { notification, notificationIsVisible } = this.state;\n    return (\n      <>\n        <CSSTransition\n          in={notificationIsVisible}\n          timeout={3000}\n          classNames=\"Notification-slideIn\"\n          unmountOnExit\n          onEntered={() => this.setState({ notificationIsVisible: false })}\n        >\n          <Notification message={notification} />\n        </CSSTransition>{' '}\n        {/* <form\n          className={styles.form}\n          autoComplete=\"off\"\n          onSubmit={this.handleSubmit}\n        >\n          <label className={styles.label}>\n            <p className={styles.labelName}>Name:&#42;</p>\n            <input\n              required\n              className={styles.input}\n              type=\"text\"\n              placeholder=\"ex. Anne Hathaway\"\n              value={this.state.name}\n              name=\"name\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <label className={styles.label}>\n            <p className={styles.labelName}>Number:&#42;</p>\n            <input\n              required\n              className={styles.input}\n              type=\"number\"\n              placeholder=\"ex. 0532455678\"\n              value={this.state.number}\n              name=\"number\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <button className={styles.button} type=\"submit\">\n            Add contact\n          </button>\n        </form> */}\n        <Form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n            <Form.Label column sm=\"3\">\n              Name:&#42;\n            </Form.Label>\n            <Col sm=\"9\">\n              <Form.Control\n                required\n                // className={styles.input}\n                type=\"text\"\n                placeholder=\"ex. Anne Hathaway\"\n                value={this.state.name}\n                name=\"name\"\n                onChange={this.handleInputChange}\n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"formPlaintextPassword\">\n            <Form.Label column sm=\"3\">\n              Number:&#42;\n            </Form.Label>\n            <Col sm=\"9\">\n              <Form.Control\n                required\n                // className={styles.input}\n                type=\"number\"\n                placeholder=\"ex. 0532455678\"\n                value={this.state.number}\n                name=\"number\"\n                onChange={this.handleInputChange}\n              />\n            </Col>\n          </Form.Group>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            style={{ margin: '0 auto', display: 'block', opacity: '0.7' }}\n          >\n            Add contact\n          </Button>\n        </Form>\n      </>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n});\nconst mapDispatchToProps = {\n  onAddContact: conntactOperations.addContact,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import styles from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport contactActions from '../../redux/phonebook/phonebook-actions';\nimport contactsSelectors from '../../redux/phonebook/phonebookSelectors';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    // <label className={styles.label}>\n    //   <p className={styles.labelName}>c</p>\n    //   <input\n    //     className={styles.input}\n    //     type=\"text\"\n    //     placeholder=\"Name\"\n    //     value={value}\n    //     onChange={e => onChange(e.target.value)}\n    //   ></input>\n    // </label>\n    <Form.Group\n      as={Row}\n      controlId=\"formPlaintextEmail\"\n      style={{ marginTop: '20px' }}\n    >\n      <Form.Label column sm=\"5\">\n        Find contact by name\n      </Form.Label>\n      <Col sm=\"7\">\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Name\"\n          value={value}\n          onChange={e => onChange(e.target.value)}\n        />\n      </Col>\n    </Form.Group>\n  );\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = {\n  onChange: contactActions.filterContacts,\n};\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport './AppName.css';\nimport '../../styles/base.scss';\n\nconst AppName = () => {\n  return (\n    <CSSTransition\n      in={true}\n      appear={true}\n      timeout={250}\n      classNames=\"AppName-slideIn\"\n      unmountOnExit\n    >\n      <h2>Phonebook</h2>\n    </CSSTransition>\n  );\n};\n\nexport default AppName;\n","import React, { Component } from 'react';\nimport Container from '../components/ContactsAppContainer';\nimport ContactList from '../components/ContactList';\nimport ContactForm from '../components/Form';\nimport Filter from '../components/Filter';\nimport AppName from '../components/AppName';\nimport contactOperations from '../redux/phonebook/phonebookOperations';\nimport { connect } from 'react-redux';\nimport contactSelectors from '../redux/phonebook/phonebookSelectors';\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n  render() {\n    return (\n      <Container>\n        <AppName />\n        <ContactForm />\n        <Filter />\n        <h2>Contacts</h2>\n        {this.props.isLoading && <h2>Loading...</h2>}\n        <ContactList />\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContact: contactSelectors.getLoading(state),\n});\nconst mapDispatchToProps = {\n  onFetchContacts: contactOperations.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n"],"sourceRoot":""}